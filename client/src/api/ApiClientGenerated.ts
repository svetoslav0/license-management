//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import axios, { AxiosError, AxiosInstance, AxiosRequestConfig, AxiosResponse, CancelToken } from 'axios';

export class Client {
    protected instance: AxiosInstance;
    protected baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance || axios.create();

        this.baseUrl = baseUrl ?? "";

    }

    /**
     * @param user_id (optional) 
     * @return Get current plan response
     */
    assignLicense(user_id: number | null | undefined, cancelToken?: CancelToken): Promise<ResponseMessage> {
        let url_ = this.baseUrl + "/Licenses/assign";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = new FormData();
        if (user_id !== null && user_id !== undefined)
            content_.append("user_id", user_id.toString());

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processAssignLicense(_response);
        });
    }

    protected processAssignLicense(response: AxiosResponse): Promise<ResponseMessage> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = ResponseMessage.fromJS(resultData200);
            return Promise.resolve<ResponseMessage>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ResponseMessage>(null as any);
    }

    /**
     * @param user_id (optional) 
     * @return Get current plan response
     */
    unassignLicense(user_id: number | null | undefined, cancelToken?: CancelToken): Promise<ResponseMessage> {
        let url_ = this.baseUrl + "/Licenses/unassign";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = new FormData();
        if (user_id !== null && user_id !== undefined)
            content_.append("user_id", user_id.toString());

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processUnassignLicense(_response);
        });
    }

    protected processUnassignLicense(response: AxiosResponse): Promise<ResponseMessage> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = ResponseMessage.fromJS(resultData200);
            return Promise.resolve<ResponseMessage>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ResponseMessage>(null as any);
    }

    /**
     * @return Get current plan response
     */
    getPlansInfo( cancelToken?: CancelToken): Promise<PlansInfoResponse> {
        let url_ = this.baseUrl + "/Plan";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetPlansInfo(_response);
        });
    }

    protected processGetPlansInfo(response: AxiosResponse): Promise<PlansInfoResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PlansInfoResponse.fromJS(resultData200);
            return Promise.resolve<PlansInfoResponse>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PlansInfoResponse>(null as any);
    }

    /**
     * @param plan_name (optional) 
     * @return Get current plan response
     */
    switchPlan(plan_name: string | null | undefined, cancelToken?: CancelToken): Promise<ResponseMessage> {
        let url_ = this.baseUrl + "/Plan/switch";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = new FormData();
        if (plan_name !== null && plan_name !== undefined)
            content_.append("plan_name", plan_name.toString());

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processSwitchPlan(_response);
        });
    }

    protected processSwitchPlan(response: AxiosResponse): Promise<ResponseMessage> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = ResponseMessage.fromJS(resultData200);
            return Promise.resolve<ResponseMessage>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ResponseMessage>(null as any);
    }

    /**
     * @param username (optional) 
     * @param name (optional) 
     * @return Get current plan response
     */
    createUser(username: string | null | undefined, name: string | null | undefined, cancelToken?: CancelToken): Promise<ResponseMessage> {
        let url_ = this.baseUrl + "/User";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = new FormData();
        if (username !== null && username !== undefined)
            content_.append("Username", username.toString());
        if (name !== null && name !== undefined)
            content_.append("Name", name.toString());

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processCreateUser(_response);
        });
    }

    protected processCreateUser(response: AxiosResponse): Promise<ResponseMessage> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = ResponseMessage.fromJS(resultData200);
            return Promise.resolve<ResponseMessage>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ResponseMessage>(null as any);
    }

    /**
     * @return Get current plan response
     */
    getUsers( cancelToken?: CancelToken): Promise<UserResponse> {
        let url_ = this.baseUrl + "/User";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetUsers(_response);
        });
    }

    protected processGetUsers(response: AxiosResponse): Promise<UserResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = UserResponse.fromJS(resultData200);
            return Promise.resolve<UserResponse>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<UserResponse>(null as any);
    }
}

export class CurrentPlanItem implements ICurrentPlanItem {
    planName?: string | undefined;
    seatLimit?: number | undefined;
    switchedAt?: Date | undefined;
    currentLicensesCount?: number | undefined;

    constructor(data?: ICurrentPlanItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.planName = _data["planName"];
            this.seatLimit = _data["seatLimit"];
            this.switchedAt = _data["switchedAt"] ? new Date(_data["switchedAt"].toString()) : <any>undefined;
            this.currentLicensesCount = _data["currentLicensesCount"];
        }
    }

    static fromJS(data: any): CurrentPlanItem {
        data = typeof data === 'object' ? data : {};
        let result = new CurrentPlanItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["planName"] = this.planName;
        data["seatLimit"] = this.seatLimit;
        data["switchedAt"] = this.switchedAt ? this.switchedAt.toISOString() : <any>undefined;
        data["currentLicensesCount"] = this.currentLicensesCount;
        return data;
    }
}

export interface ICurrentPlanItem {
    planName?: string | undefined;
    seatLimit?: number | undefined;
    switchedAt?: Date | undefined;
    currentLicensesCount?: number | undefined;
}

export class PlanItem implements IPlanItem {
    name?: string | undefined;
    seatLimit?: number | undefined;

    constructor(data?: IPlanItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.seatLimit = _data["seatLimit"];
        }
    }

    static fromJS(data: any): PlanItem {
        data = typeof data === 'object' ? data : {};
        let result = new PlanItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["seatLimit"] = this.seatLimit;
        return data;
    }
}

export interface IPlanItem {
    name?: string | undefined;
    seatLimit?: number | undefined;
}

export class PlansInfoResponse implements IPlansInfoResponse {
    currentPlan!: CurrentPlanItem;
    plans!: PlanItem[];

    constructor(data?: IPlansInfoResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.currentPlan = new CurrentPlanItem();
            this.plans = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.currentPlan = _data["currentPlan"] ? CurrentPlanItem.fromJS(_data["currentPlan"]) : new CurrentPlanItem();
            if (Array.isArray(_data["plans"])) {
                this.plans = [] as any;
                for (let item of _data["plans"])
                    this.plans!.push(PlanItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PlansInfoResponse {
        data = typeof data === 'object' ? data : {};
        let result = new PlansInfoResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["currentPlan"] = this.currentPlan ? this.currentPlan.toJSON() : <any>undefined;
        if (Array.isArray(this.plans)) {
            data["plans"] = [];
            for (let item of this.plans)
                data["plans"].push(item ? item.toJSON() : <any>undefined);
        }
        return data;
    }
}

export interface IPlansInfoResponse {
    currentPlan: CurrentPlanItem;
    plans: PlanItem[];
}

export class ResponseMessage implements IResponseMessage {
    message?: string | undefined;

    constructor(data?: IResponseMessage) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): ResponseMessage {
        data = typeof data === 'object' ? data : {};
        let result = new ResponseMessage();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["message"] = this.message;
        return data;
    }
}

export interface IResponseMessage {
    message?: string | undefined;
}

export class UserResponse implements IUserResponse {
    data?: UserResponseData | undefined;

    constructor(data?: IUserResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.data = _data["data"] ? UserResponseData.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): UserResponse {
        data = typeof data === 'object' ? data : {};
        let result = new UserResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IUserResponse {
    data?: UserResponseData | undefined;
}

export class UserResponseData implements IUserResponseData {
    count?: number | undefined;
    users?: UserResponseItem[] | undefined;

    constructor(data?: IUserResponseData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.count = _data["count"];
            if (Array.isArray(_data["users"])) {
                this.users = [] as any;
                for (let item of _data["users"])
                    this.users!.push(UserResponseItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): UserResponseData {
        data = typeof data === 'object' ? data : {};
        let result = new UserResponseData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["count"] = this.count;
        if (Array.isArray(this.users)) {
            data["users"] = [];
            for (let item of this.users)
                data["users"].push(item ? item.toJSON() : <any>undefined);
        }
        return data;
    }
}

export interface IUserResponseData {
    count?: number | undefined;
    users?: UserResponseItem[] | undefined;
}

export class UserResponseItem implements IUserResponseItem {
    id?: number | undefined;
    username?: string | undefined;
    name?: string | undefined;
    hasLicense?: boolean | undefined;

    constructor(data?: IUserResponseItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.username = _data["username"];
            this.name = _data["name"];
            this.hasLicense = _data["hasLicense"];
        }
    }

    static fromJS(data: any): UserResponseItem {
        data = typeof data === 'object' ? data : {};
        let result = new UserResponseItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["username"] = this.username;
        data["name"] = this.name;
        data["hasLicense"] = this.hasLicense;
        return data;
    }
}

export interface IUserResponseItem {
    id?: number | undefined;
    username?: string | undefined;
    name?: string | undefined;
    hasLicense?: boolean | undefined;
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}

function isAxiosError(obj: any): obj is AxiosError {
    return obj && obj.isAxiosError === true;
}